generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?
    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Base Base[] 
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    @@unique([identifier, token])
}


model Base {
  id        String   @id @default(cuid())
  name      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
  userId    String
  tables    Table[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Table {
  id        String   @id @default(cuid())
  name      String
  base      Base     @relation(fields: [baseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  baseId    String
  columns   Column[]
  rows      Row[]
  cells     Cell[]
  views     View[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Column {
  id          String   @id @default(cuid())
  name        String
  type        String
  order       Int
  defaultValue String? 
  tableId     String
  table       Table    @relation(fields: [tableId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cells       Cell[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Row {
  id        String   @id @default(cuid())
  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tableId   String
  cells     Cell[]
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cell {
  id        String   @id @default(cuid())
  value     String?  
  row       Row      @relation(fields: [rowId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rowId     String
  column    Column   @relation(fields: [columnId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  columnId  String
  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tableId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([rowId, columnId])
  @@index([value]) 
}

model View {
  id        String       @id @default(cuid())
  name      String
  table     Table        @relation(fields: [tableId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tableId   String
  filters   ViewFilter[]
  sorts     ViewSort[]
  selected     Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model ViewFilter {
  id        String   @id @default(cuid())
  view      View     @relation(fields: [viewId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  viewId    String
  columnId  String
  operator  String   
  value     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ViewSort {
  id        String   @id @default(cuid())
  view      View     @relation(fields: [viewId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  viewId    String
  columnId  String
  direction String  
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}